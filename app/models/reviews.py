from flask import current_app as app

class Review:
    def __init__(self, id, uid, pid, review_time, review_rating, review = ""):
        self.id = id
        self.uid = uid
        self.pid = pid
        self.review_time = review_time
        self.review = review
        self.review_rating = review_rating
        #self.review_image = review_image

    @staticmethod
    # Function to get all product reviews mapped to a user id given a user id
    def get_all_by_uid(uid):
        rows = app.db.execute (
            '''
            SELECT *
            FROM Reviews
            WHERE buyer_id = :uid
            ORDER BY review_time DESC
            ''',
            uid=uid
        )
        return [Review(*row) for row in rows]
    
    @staticmethod
    def get_all_by_seller_id_with_product_info(uid):
        rows = app.db.execute (
            '''
            SELECT Reviews.review_time, Reviews.rating, Reviews.review, Products.name
            FROM Reviews, Products
            WHERE Reviews.product_id = Products.id
            AND Products.user_id = :uid
            ORDER BY review_time DESC
            ''',
            uid=uid
        )
        return rows
    
    def get_review(uid, pid):
        # TODO
        pass
    
    def add_review(uid, pid, review, rating, time):
        # app.db.execute (
        #     f'INSERT INTO Reviews (buyer_id, product_id, review, rating, review_time)\nVALUES ({uid}, {pid}, {review}, {rating}, {time})'
        # )
        app.db.execute (
            '''INSERT INTO Reviews (buyer_id, product_id, review, rating, review_time) 
            VALUES (:uid, :pid, :review, :rating, :time)''',
            uid=uid, 
            pid=pid,
            review=review,
            rating=rating,
            time=time
        )

    def update_review(uid, pid, review, rating, time):
        #change your review
        pass

    def delete_review(uid, pid):
        #TODO delete existing review
        app.db.execute (
            '''DELETE FROM Reviews 
            WHERE buyer_id = :uid
            AND product_id = :pid''',
            uid=uid,
            pid=pid
        )

"""
CREATE TABLE Reviews(
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    buyer_id INT NOT NULL REFERENCES Users (id),
    product_id INT NOT NULL REFERENCES Products (id),
    review VARCHAR(255),
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    review_time timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC')
);
"""
    
   